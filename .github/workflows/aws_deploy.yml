name: Deploy to Staging

on:
  push:
    branches:
      - 'main'      # triggers on main branch for releases
      - 'feature/*' # triggers on feature branches for staging
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy to staging'
        required: true
        type: string

# Add permissions block at the workflow level
permissions:
  contents: write  # This allows the workflow to create tags

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate swagger docs
        run: swag init --generalInfo cmd/main.go --output docs

      - name: Run tests
        run: go test -v ./...

      - name: Run tests with coverage
        run: go test -v -coverprofile=coverage.out ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  deploy-to-staging:
    runs-on: ubuntu-latest
    environment: staging
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for versioning

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install swag
        run: go install github.com/swaggo/swag/cmd/swag@latest

      - name: Generate swagger docs
        run: swag init --generalInfo cmd/main.go --output docs

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set version
        id: set_version
        run: |
          # Get the latest version tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")

          # Strip the 'v' prefix and split into major, minor, patch
          LATEST_CLEAN=${LATEST_TAG#v}
          VERSION_PARTS=(${LATEST_CLEAN//./ })
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          if [[ "$GITHUB_REF" == "refs/heads/main" ]]; then
            # For main branch, increment patch version
            PATCH=$((PATCH + 1))
            VERSION="${MAJOR}.${MINOR}.${PATCH}"
          else
            # For feature branches, append branch name and commit hash to current version
            BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')
            COMMIT_HASH=$(git rev-parse --short HEAD)
            VERSION="${MAJOR}.${MINOR}.${PATCH}-${BRANCH_NAME}-${COMMIT_HASH}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "New version: $VERSION"

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        run: |
          docker build --no-cache -t go-api .
          docker tag go-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:${{ env.VERSION }}
          docker tag go-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:latest

      - name: Verify Swagger docs in container
        run: |
          # Create a temporary container to check if docs were generated
          docker run --rm go-api:latest ls -la /root/docs/ || echo "Docs directory not found"
          docker run --rm go-api:latest cat /root/docs/swagger.json | jq '.paths | keys' || echo "Failed to read swagger.json"

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:${{ env.VERSION }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:latest

      - name: Update ECS Service
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          TASK_DEFINITION: GoApiInfraStackGoApiFargateServiceTaskDef1BE268E8
          CLUSTER: GoApiInfraStack-GoApiClusterD2A0AA60-xTXIdquI0A3P
          SERVICE: GoApiInfraStack-GoApiFargateService7D208A3F-eo57UwZsRmTg
          SECRET_ARN: arn:aws:secretsmanager:us-east-1:069597727371:secret:staging/go-api-3V2g50
        run: |
          chmod +x ./.github/scripts/update_ecs.sh
          ./.github/scripts/update_ecs.sh

      - name: Run Database Migrations
        env:
          TURSO_DATABASE_URL: ${{ secrets.TURSO_DATABASE_URL }}
          TURSO_AUTH_TOKEN: ${{ secrets.TURSO_AUTH_TOKEN }}
        run: |
          # Install Turso CLI
          curl -sSfL https://get.tur.so/install.sh | bash
          export PATH="$HOME/.turso:$PATH"
          
          # Run migrations using Turso CLI
          echo "Running migration: 002_remove_published_field.sql"
          turso db shell --url "$TURSO_DATABASE_URL" --auth-token "$TURSO_AUTH_TOKEN" < migrations/002_remove_published_field.sql
          
          echo "Migrations completed successfully"

      - name: Create Git tag for releases
        if: github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a "v${{ env.VERSION }}" -m "Release v${{ env.VERSION }}"
          git push origin "v${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

