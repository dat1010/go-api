name: Deploy to Environments

on:
  push:
    branches:
      - 'release_*'  # triggers on branches starting with "release_" for staging
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy to production (format: 1.0.0)'
        required: true
        type: string

jobs:
  deploy-to-staging:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # change if needed

      - name: Extract version from branch name
        id: extract_version
        run: |
          echo "GITHUB_REF: $GITHUB_REF"
          # This extracts the version after 'release_' from e.g. refs/heads/release_1.0.0
          VERSION="${GITHUB_REF#refs/heads/release_}"
          echo "Version extracted: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "::set-output name=version::$VERSION"

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Build Docker image
        run: |
          # Build the Docker image using your Dockerfile in the repository
          docker build -t go-api .
          # Tag the image with the version extracted from the branch
          docker tag go-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:${{ env.VERSION }}
          # Also tag it as "latest" for convenience
          docker tag go-api:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:latest

      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:${{ env.VERSION }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:latest

      - name: Update Staging ECS Service
        run: |
          # Update the ECS service to force a new deployment
          aws ecs update-service --cluster GoApiInfraStack-GoApiClusterD2A0AA60-lZ8voGHK2Stj --service GoApiInfraStack-GoApiFargateService7D208A3F-diJOgcTrPlCR --force-new-deployment

  deploy-to-production:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set version from input
        run: |
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

      - name: Update Production ECS Service
        run: |
          # Update the task definition to use the specified version
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition GoApiProdInfraStackGoApiProdFargateServiceTaskDef48554D7D --query 'taskDefinition' --output json)
          
          # Update the image in the task definition
          NEW_TASK_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/go-api:${{ env.VERSION }}" '.containerDefinitions[0].image = $IMAGE')
          
          # Extract CPU and memory values, with proper handling
          CPU_VALUE=$(echo $TASK_DEFINITION | jq -r '.cpu')
          MEMORY_VALUE=$(echo $TASK_DEFINITION | jq -r '.memory')
          
          # Prepare CPU and memory parameters
          CPU_PARAM=""
          if [ "$CPU_VALUE" != "null" ]; then
            CPU_PARAM="--cpu $CPU_VALUE"
          fi
          
          MEMORY_PARAM=""
          if [ "$MEMORY_VALUE" != "null" ]; then
            MEMORY_PARAM="--memory $MEMORY_VALUE"
          fi
          
          # Register the new task definition with proper parameter handling
          aws ecs register-task-definition \
            --family GoApiProdInfraStackGoApiProdFargateServiceTaskDef48554D7D \
            --container-definitions "$(echo $NEW_TASK_DEFINITION | jq '.containerDefinitions')" \
            $CPU_PARAM $MEMORY_PARAM \
            --task-role-arn "$(echo $TASK_DEFINITION | jq -r '.taskRoleArn')" \
            --execution-role-arn "$(echo $TASK_DEFINITION | jq -r '.executionRoleArn')" \
            --network-mode "$(echo $TASK_DEFINITION | jq -r '.networkMode')"
          
          # Deploy to production ECS service
          aws ecs update-service --cluster GoApiProdInfraStack-GoApiProdClusterEF8B48A5-2CIzUbRY1I5e --service GoApiProdInfraStack-GoApiProdFargateService66083257-cRtuz0jq5YRJ --task-definition GoApiProdInfraStackGoApiProdFargateServiceTaskDef48554D7D --force-new-deployment
