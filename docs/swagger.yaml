basePath: /api
definitions:
  controllers.CreateEventRequest:
    properties:
      description:
        example: A scheduled event that runs daily
        type: string
      name:
        example: my-scheduled-event
        type: string
      payload:
        additionalProperties:
          type: string
        example:
          '{"key"': '"value"}'
        type: object
      schedule:
        description: cron expression
        example: 0 12 * * ? *
        type: string
    required:
    - name
    - schedule
    type: object
  controllers.CreatePostRequest:
    properties:
      content:
        type: string
      published:
        type: boolean
      title:
        type: string
    required:
    - content
    - title
    type: object
  controllers.Event:
    properties:
      created_at:
        example: "2024-03-20T12:00:00Z"
        type: string
      description:
        example: A scheduled event that runs daily
        type: string
      name:
        example: my-scheduled-event
        type: string
      payload:
        additionalProperties:
          type: string
        example:
          '{"key"': '"value"}'
        type: object
      schedule:
        example: 0 12 * * ? *
        type: string
    type: object
  controllers.Health:
    properties:
      version:
        type: string
    type: object
  controllers.Post:
    properties:
      auth0_user_id:
        type: string
      content:
        type: string
      created_at:
        type: string
      id:
        type: string
      published:
        type: boolean
      slug:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  controllers.TokenResponse:
    properties:
      access_token:
        type: string
      expires_in:
        type: integer
      id_token:
        type: string
      refresh_token:
        type: string
      token_type:
        type: string
    type: object
  controllers.UpdatePostRequest:
    properties:
      content:
        type: string
      published:
        type: boolean
      title:
        type: string
    type: object
host: api.nofeed.zone
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: A simple API written in Golang with AWS EventBridge integration
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Go API
  version: "1.0"
paths:
  /api/callback:
    get:
      description: Process the callback from Auth0 after user authentication
      parameters:
      - description: Authorization code from Auth0
        in: query
        name: code
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Authentication successful
          schema:
            $ref: '#/definitions/controllers.TokenResponse'
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Handle Auth0 callback
      tags:
      - auth
  /api/healthcheck:
    get:
      description: Return service version
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Health'
      summary: Health Check
      tags:
      - health
  /api/login:
    get:
      description: Redirects the user to Auth0 for authentication
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to Auth0
          schema:
            type: string
      summary: Redirect to Auth0 login page
      tags:
      - auth
  /api/logout:
    get:
      description: Logs out the user by clearing the session cookie and redirecting
        to Auth0 logout
      produces:
      - application/json
      responses:
        "307":
          description: Redirect to Auth0 logout
          schema:
            type: string
      summary: Logout user
      tags:
      - auth
  /events:
    get:
      description: Get all EventBridge rules created by the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: List of events
          schema:
            items:
              $ref: '#/definitions/controllers.Event'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: List events for the authenticated user
      tags:
      - events
    post:
      consumes:
      - application/json
      description: Create an AWS EventBridge rule with the provided schedule and payload
      parameters:
      - description: Event data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateEventRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Event created successfully
          schema:
            $ref: '#/definitions/controllers.Event'
        "400":
          description: Invalid request data
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Create a new scheduled event
      tags:
      - events
  /events/{name}:
    delete:
      security:
        - Bearer: []
      description: Delete an AWS EventBridge rule and its associated targets
      parameters:
      - description: Event name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Event deleted successfully
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden - User does not own this event
          schema:
            type: object
        "404":
          description: Event not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Delete a scheduled event
      tags:
      - events
  /posts:
    get:
      description: Get a list of posts with optional filtering. This is a public endpoint
        and does not require authentication.
      parameters:
      - description: Filter by published status
        in: query
        name: published
        type: boolean
      - description: Filter by author ID
        in: query
        name: author
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.Post'
            type: array
        "500":
          description: Internal server error
          schema:
            type: object
      summary: List posts
      tags:
      - posts
    post:
      consumes:
      - application/json
      description: Create a new post with the provided data
      parameters:
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/controllers.CreatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.Post'
        "400":
          description: Invalid request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Create a new post
      tags:
      - posts
  /posts/{id}:
    delete:
      description: Delete a post by its ID
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Post not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Delete a post
      tags:
      - posts
    get:
      description: Get a post by its ID. This is a public endpoint and does not require
        authentication.
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Post'
        "404":
          description: Post not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      summary: Get a post by ID
      tags:
      - posts
    put:
      consumes:
      - application/json
      description: Update an existing post
      parameters:
      - description: Post ID
        in: path
        name: id
        required: true
        type: string
      - description: Post data
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Post'
        "400":
          description: Invalid request
          schema:
            type: object
        "401":
          description: Unauthorized
          schema:
            type: object
        "403":
          description: Forbidden
          schema:
            type: object
        "404":
          description: Post not found
          schema:
            type: object
        "500":
          description: Internal server error
          schema:
            type: object
      security:
      - Bearer: []
      summary: Update a post
      tags:
      - posts
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
